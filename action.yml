name: Build and configure a container image
description: Build a container image and optionally push it. Labels and tags will be configured as per the OCI standards.

inputs:
  registry:
    description: The registry where the image will be pushed to.
    required: false
    default: registry.equisoft.io
  aws-access-key-id:
    description: An AWS access key ID that has write permissions to the registry.
    required: false
  aws-secret-access-key:
    description: An AWS secret access key that has write permissions to the registry.
    required: false
  aws-region:
    description: AWS region for the registry.
    required: false
  build-args:
    description: Arguments passed to the build command.
    required: false
    default: ""
  context:
    description: Relative path under $GITHUB_WORKSPACE for the Docker context.
    required: false
    default: "."
  dockerfile:
    description: Relative Dockerfile under `working-directory`.
    required: true
    default: Dockerfile
  request-memory:
    description: Requested memory for k8s
    required: true
    default: '2Gi'
  max-memory:
    description: Max memory for k8s
    required: true
    default: '6Gi'
  name:
    description: A simple name for this image
    required: true
  is-release:
    description: if this build is a production release
    required: false
    default: "false"
  push:
    description: "`true` to push the built image. `false` otherwise (default)."
    required: true
    default: "false"
  platforms:
    description: "List of platforms to build"
    required: true
    default: "linux/amd64,linux/arm64"
  use-emulation:
    description: "Set to false to use k8s cluster"
    required: true
    default: "true"
  version:
    description: The SemVer compatible version for this image, without prefixes.
    required: true
  working-directory:
    description: >-
      Relative path under $GITHUB_WORKSPACE where the project is located.
      This also acts as the context given to the docker build command.
    required: false
    default: "."

outputs:
  image-version:
    description: Image version built by this action
    value: ${{ steps.outputs.outputs.image-version }}

runs:
  using: composite
  steps:
    - name: Action context
      shell: bash
      id: context
      run: |
        working_directory=$(realpath ${{ inputs.working-directory }})
        echo "::set-output name=is-ecr::${{ inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != '' && inputs.aws-region != '' }}"

    - name: Prepare image data
      id: metadata
      uses: equisoft-actions/docker-metadata@v1
      with:
        title: ${{ inputs.name }}
        image-name: ${{ inputs.registry }}/${{ inputs.name }}
        release: ${{ inputs.is-release }}
        version: ${{ inputs.version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1
      if: steps.context.outputs.is-ecr == 'true'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: inputs.use-emulation == 'true'

    - name: Set up Local Docker Buildx
      uses: docker/setup-buildx-action@v1
      if: inputs.use-emulation == 'true'

    - name: Set up k8s Docker Buildx
      id: k8s-buildx
      uses: docker/setup-buildx-action@v1
      if: inputs.use-emulation == 'false'
      with:
        driver: kubernetes
        driver-opts: |
          namespace=actions-runner-docker
          requests.cpu=1
          limits.cpu=4
          requests.memory=${{ inputs.request-memory }}
          limits.memory=${{ inputs.max-memory }}
          nodeselector=kubernetes.io/arch=amd64
          rootless=true

    - name: Set up k8s Docker Buildx
      shell: bash
      if: inputs.use-emulation == 'false'
      run: |
        for row in $(echo ${{ inputs.platforms }} | jq -R -c 'split(",") | del(.[] | select(. == "linux/amd64")) | .[]'); do
          platform=$(echo $row | jq -r .)
          arch=${platform##*/}
          docker buildx create --append --name ${{ steps.k8s-buildx.outputs.name }} --node ${{ steps.k8s-buildx.outputs.name }}-$arch --driver=kubernetes --platform $platform --driver-opt "namespace=actions-runner-docker,requests.cpu=1,requests.memory=${{ inputs.request-memory }},limits.cpu=4,limits.memory=${{ inputs.max-memory }},nodeselector=kubernetes.io/arch=${arch},rootless=true"
        done

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: ${{ inputs.context }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        push: ${{ inputs.push == 'true' }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}

    - name: Output image tag
      id: outputs
      shell: bash
      run: |
        IMAGE_TAG=$(cut -d',' -f1 <<<'${{ steps.metadata.outputs.tags }}')
        IMAGE_VERSION=$(cut -d':' -f2 <<<"${IMAGE_TAG}")
        echo "::set-output name=image-version::${IMAGE_VERSION}"
