name: Build and configure a container image
description: Build a container image and optionally push it. Labels and tags will be configured as per the OCI standards.

inputs:
  registry:
    description: The registry where the image will be pushed to.
    required: false
    default: registry.equisoft.io
  aws-access-key-id:
    description: DEPRECATED. Use `role-to-assume` instead. An AWS access key ID that has write permissions to the registry.
    required: false
  aws-secret-access-key:
    description: An AWS secret access key that has write permissions to the registry.
    required: false
  aws-region:
    description: AWS region for the registry.
    required: false
  build-args:
    description: Arguments passed to the build command.
    required: false
    default: ""
  context:
    description: Relative path under $GITHUB_WORKSPACE for the Docker context.
    required: false
    default: "."
  dockerfile:
    description: Relative Dockerfile under `working-directory`.
    required: true
    default: Dockerfile
  request-cpu:
    description: Requested cpu for k8s
    required: false
    default: '4'
  max-cpu:
    description: Max cpu for k8s
    required: false
    default: '4'
  request-memory:
    description: Requested memory for k8s
    required: true
    default: '8Gi'
  max-memory:
    description: Max memory for k8s
    required: true
    default: '16Gi'
  name:
    description: A simple name for this image
    required: true
  no-cache:
    description: Do not use cache when building the image (default false)
    required: false
    default: "false"
  is-release:
    description: if this build is a production release
    required: false
    default: "false"
  pull:
    description: Always attempt to pull all referenced images (default false)
    required: false
    default: "false"
  push:
    description: "`true` to push the built image. `false` otherwise (default)."
    required: true
    default: "false"
  platforms:
    description: "List of platforms to build"
    required: true
    default: "linux/amd64,linux/arm64"
  role-to-assume:
    description: Role to assume that has write access to the registry.
    required: false
  role-session-name:
    description: Session name to use when assuming the role.
    required: false
  use-emulation:
    description: "Set to false to use k8s cluster"
    required: true
    default: "true"
  version:
    description: The SemVer compatible version for this image, without prefixes.
    required: true
  working-directory:
    description: >-
      Relative path under $GITHUB_WORKSPACE where the project is located.
      This also acts as the context given to the docker build command.
    required: false
    default: "."

outputs:
  image-id:
    description: Image ID built by this action
    value: ${{ steps.build-push.outputs.imageid }}
  image-version:
    description: Image version built by this action
    value: ${{ steps.outputs.outputs.image-version }}

runs:
  using: composite
  steps:
    - name: Action context
      shell: bash
      id: context
      run: |
        echo "has-role=${{ inputs.role-to-assume != '' }}" >> $GITHUB_OUTPUT
        echo "is-ecr=${{ inputs.aws-region != '' }}" >> $GITHUB_OUTPUT

    - name: Prepare image data
      id: metadata
      uses: equisoft-actions/docker-metadata@v1
      with:
        title: ${{ inputs.name }}
        image-name: ${{ inputs.registry }}/${{ inputs.name }}
        release: ${{ inputs.is-release }}
        version: ${{ inputs.version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-access-key-id: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-access-key-id || '' }}
        aws-secret-access-key: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-secret-access-key || '' }}
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      if: steps.context.outputs.is-ecr == 'true'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      if: inputs.use-emulation == 'true'

    - name: Set up Local Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: inputs.use-emulation == 'true'

    - name: Set up k8s Docker Buildx
      id: k8s-buildx
      uses: docker/setup-buildx-action@v3
      if: inputs.use-emulation == 'false'
      with:
        driver: kubernetes
        driver-opts: |
          namespace=actions-runner-docker
          requests.cpu=${{ inputs.request-cpu }}
          limits.cpu=${{ inputs.max-cpu }}
          requests.memory=${{ inputs.request-memory }}
          limits.memory=${{ inputs.max-memory }}
          nodeselector=eks/nodegroup=github-build-amd64
          tolerations=operator=Exists
          annotations=karpenter.sh/do-not-disrupt=true
          rootless=true

    - name: Set up k8s Docker Buildx
      shell: bash
      if: inputs.use-emulation == 'false'
      run: |
        for row in $(echo ${{ inputs.platforms }} | jq -R -c 'split(",") | del(.[] | select(. == "linux/amd64")) | .[]'); do
          platform=$(echo $row | jq -r .)
          arch=${platform##*/}
          docker buildx create --append \
                  --name ${{ steps.k8s-buildx.outputs.name }}\
                  --node ${{ steps.k8s-buildx.outputs.name }}-$arch\
                  --driver=kubernetes\
                  --platform $platform\
                  --driver-opt "namespace=actions-runner-docker,requests.cpu=${{ inputs.request-cpu }},requests.memory=${{ inputs.request-memory }},limits.cpu=${{ inputs.max-cpu }},limits.memory=${{ inputs.max-memory }},nodeselector=eks/nodegroup=github-build-${arch},\"tolerations=key=dedicated,value=build-${arch},operator=Equal,effect=NoSchedule\",annotations=karpenter.sh/do-not-disrupt=true,rootless=true"
        done

    - name: Build and push
      id: build-push
      uses: docker/build-push-action@v5
      with:
        annotations: ${{ steps.metadata.outputs.annotations }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: ${{ inputs.context }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        labels: ${{ steps.metadata.outputs.labels }}
        load: ${{ inputs.push != 'true' && !contains(inputs.platforms, ',') }}
        no-cache: ${{ inputs.no-cache == 'true' }}
        provenance: false
        pull: ${{ inputs.pull == 'true' }}
        push: ${{ inputs.push == 'true' }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.metadata.outputs.tags }}

    - name: Output image tag
      id: outputs
      shell: bash
      run: |
        IMAGE_TAG=$(cut -d',' -f1 <<<'${{ steps.metadata.outputs.tags }}')
        IMAGE_VERSION=$(cut -d':' -f2 <<<"${IMAGE_TAG}")
        echo "image-version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
