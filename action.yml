name: Build and configure a container image
description: Build a container image and optionally push it. Labels and tags will be configured as per the OCI standards.

inputs:
  registry:
    description: The registry where the image will be pushed to.
    required: false
    default: registry.equisoft.io
  aws-access-key-id:
    description: DEPRECATED. Use `role-to-assume` instead. An AWS access key ID that has write permissions to the registry.
    required: false
  aws-secret-access-key:
    description: An AWS secret access key that has write permissions to the registry.
    required: false
  aws-region:
    description: AWS region for the registry.
    required: false
  build-args:
    description: Arguments passed to the build command.
    required: false
    default: ""
  build-summary:
    description: Show the build summary.
    required: false
    default: "false"
  context:
    description: Relative path under $GITHUB_WORKSPACE for the Docker context.
    required: false
    default: "."
  dockerfile:
    description: Path to Dockerfile relative to context (e.g., 'Dockerfile' or 'docker/Dockerfile')
    required: true
    default: Dockerfile
  name:
    description: A simple name for this image
    required: true
  no-cache:
    description: Do not use cache when building the image (default false)
    required: false
    default: "false"
  is-release:
    description: if this build is a production release
    required: false
    default: "false"
  pull:
    description: Always attempt to pull all referenced images (default false)
    required: false
    default: "false"
  push:
    description: "`true` to push the built image. `false` otherwise (default)."
    required: true
    default: "false"
  role-to-assume:
    description: Role to assume that has write access to the registry.
    required: false
  role-session-name:
    description: Session name to use when assuming the role.
    required: false
  version:
    description: The SemVer compatible version for this image, without prefixes.
    required: true
  working-directory:
    description: >-
      Relative path under $GITHUB_WORKSPACE where the project is located.
      Used as Docker build context if 'context' input is not provided.
    required: false
    default: "."

outputs:
  image-id:
    description: Image ID built by this action
    value: ${{ steps.build.outputs.imageid }}
  image-version:
    description: Image version built by this action
    value: ${{ steps.outputs.outputs.image-version }}
  tags:
    description: Tags built by this action (original tags, without architecture suffix)
    value: ${{ steps.metadata.outputs.tags }}

runs:
  using: composite
  steps:
    - name: Action context
      shell: bash
      id: context
      run: |
        echo "has-role=${{ inputs.role-to-assume != '' }}" >> $GITHUB_OUTPUT
        echo "is-ecr=${{ inputs.aws-region != '' }}" >> $GITHUB_OUTPUT

    - name: Prepare image data
      id: metadata
      uses: equisoft-actions/docker-metadata@v1
      with:
        title: ${{ inputs.name }}
        image-name: ${{ inputs.registry }}/${{ inputs.name }}
        release: ${{ inputs.is-release }}
        version: ${{ inputs.version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-access-key-id: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-access-key-id || '' }}
        aws-secret-access-key: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-secret-access-key || '' }}
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      if: steps.context.outputs.is-ecr == 'true'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      id: build-push
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILD_SUMMARY: ${{ inputs.build-summary == 'true' || 'false' }}
      with:
        ###
        build-args: |
          ${{ inputs.build-args }}
          BUILDKIT_MULTI_PLATFORM=1
        context: ${{ inputs.context }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        labels: ${{ steps.metadata.outputs.labels }}
        load: ${{ inputs.push != 'true' && !contains(inputs.platforms, ',') }}
        no-cache: ${{ inputs.no-cache == 'true' }}
        provenance: false
        pull: ${{ inputs.pull == 'true' }}
        push: ${{ inputs.push == 'true' }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.metadata.outputs.tags }}

    - name: Export digest
      id: export-digest
      shell: bash
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build-push.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

    - name: Output image tag
      id: outputs
      shell: bash
      run: |
        IMAGE_TAG=$(cut -d',' -f1 <<<'${{ steps.metadata.outputs.tags }}')
        IMAGE_VERSION=$(cut -d':' -f2 <<<"${IMAGE_TAG}")
        echo "image-version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
