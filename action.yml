name: Build and configure a container image
description: Build a container image and optionally push it. Labels and tags will be configured as per the OCI standards.

inputs:
  registry:
    description: The registry where the image will be pushed to.
    required: true
  annotations:
    description: Annotations to apply to the image, in the format 'key=value,key2=value2'.
    required: false
    default: ""
  aws-region:
    description: AWS region for the registry.
    required: false
  build-args:
    description: Arguments passed to the build command.
    required: false
    default: ""
  build-summary:
    description: Show the build summary.
    required: false
    default: "false"
  context:
    description: Relative path under $GITHUB_WORKSPACE for the Docker context.
    required: false
    default: "."
  dockerfile:
    description: Path to Dockerfile relative to context (e.g., 'Dockerfile' or 'docker/Dockerfile')
    required: true
    default: Dockerfile
  labels:
    description: Labels to apply to the image, in the format 'key=value,key2=value2'.
    required: false
    default: ""
  no-cache:
    description: Do not use cache when building the image (default false)
    required: false
    default: "false"
  platforms:
    description: The target platform for the image, e.g., 'linux/amd64,linux/arm64'.
    required: true
  pull:
    description: Always attempt to pull all referenced images (default false)
    required: false
    default: "false"
  push:
    description: "`true` to push the built image. `false` otherwise (default)."
    required: true
    default: "false"
  role-to-assume:
    description: Role to assume that has write access to the registry.
    required: false
  role-session-name:
    description: Session name to use when assuming the role (optional)
    required: false
  tags:
    description: Comma-separated list of tags to apply to the image.
    required: true
  working-directory:
    description: >-
      Relative path under $GITHUB_WORKSPACE where the project is located.
      Used as Docker build context if 'context' input is not provided.
    required: false
    default: "."

outputs:
  image-id:
    description: Image ID built by this action
    value: ${{ steps.build-push.outputs.imageid }}

runs:
  using: composite
  steps:
    - name: Action context
      shell: bash
      id: context
      run: |
        if [[ -z "${{ inputs.role-to-assume }}" && -n "${{ inputs.aws-region }}" ]]; then
          echo "Error: AWS region is set but role-to-assume is not." >&2
          exit 1
        fi
        echo "is-ecr=${{ inputs.aws-region != '' }}" >> $GITHUB_OUTPUT
        new_tags=$(echo "${{ inputs.tags }}" | tr ',' '\n' | sed "s/$/-${{ inputs.platform }}/" | paste -sd ',')
        echo "tags=${new_tags}" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name && inputs.role-session-name || 'build-and-push' }}-${{ github.run_id }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      if: steps.context.outputs.is-ecr == 'true'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      # if inputs.platforms contains more than one platform, this step is required to enable multi-arch builds
      if: contains(inputs.platforms, ',')
      with:
        # see: https://github.com/tonistiigi/binfmt/issues/215
        # see: https://github.com/docker/setup-qemu-action/issues/198
        image: tonistiigi/binfmt:qemu-v7.0.0-28

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      id: build-push
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILD_SUMMARY: ${{ inputs.build-summary }}
      with:
        annotations: ${{ inputs.annotations }}
        build-args: |
          ${{ inputs.build-args }}
          BUILDKIT_MULTI_PLATFORM=1
        context: ${{ inputs.context }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        labels: ${{ inputs.labels }}
        no-cache: ${{ inputs.no-cache == 'true' }}
        provenance: false
        pull: ${{ inputs.pull == 'true' }}
        push: ${{ inputs.push == 'true' }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.context.outputs.tags }}

    - name: Sanitize platform string for artifact name
      if: inputs.push == 'true' && !contains(inputs.platforms, ',')
      id: sanitize_platform
      shell: bash
      run: |
        platform_string="${{ inputs.platforms }}"
        echo "name=${platform_string//\//-}" >> $GITHUB_OUTPUT

    - name: Export digest
      if: inputs.push == 'true' && !contains(inputs.platforms, ',')
      shell: bash
      run: |
        mkdir -p ${{ runner.temp }}/digests
        echo "${{ steps.build-push.outputs.digest }}" > ${{ runner.temp }}/digests/digest-${{ steps.sanitize_platform.outputs.name }}

    - name: Upload digest
      if: inputs.push == 'true' && !contains(inputs.platforms, ',')
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ steps.sanitize_platform.outputs.name }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1
