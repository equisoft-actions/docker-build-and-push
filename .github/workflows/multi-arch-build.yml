name: Multi-Architecture Docker Build

on:
  workflow_call:
    inputs:
      aws-region:
        description: AWS region for the registry
        type: string
        required: false
      build-args:
        description: Arguments passed to the build command
        type: string
        required: false
        default: ""
      context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context
        type: string
        required: false
        default: "."
      dockerfile:
        description: Relative Dockerfile under working-directory
        type: string
        required: false
        default: Dockerfile
      name:
        description: A simple name for this image
        type: string
        required: true
      no-cache:
        description: Do not use cache when building the image
        type: boolean
        required: false
        default: false
      is-release:
        description: If this build is a production release
        type: boolean
        required: false
        default: false
      pull:
        description: Always attempt to pull all referenced images
        type: boolean
        required: false
        default: false
      push:
        description: Push the built image
        type: boolean
        required: true
        default: false
      registry:
        description: The registry where the image will be pushed to
        type: string
        required: true
      role-to-assume:
        description: Role to assume that has write access to the registry
        type: string
        required: false
      version:
        description: The SemVer compatible version for this image
        type: string
        required: true
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located
        type: string
        required: false
        default: "."

    outputs:
      image-id:
        description: Image ID built by this action
        value: ${{ jobs.create-manifest.outputs.image-id }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.metadata.outputs.tags }}
      labels: ${{ steps.metadata.outputs.labels }}
      annotations: ${{ steps.metadata.outputs.annotations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare image data
        id: metadata
        uses: equisoft-actions/docker-metadata@v1
        with:
          title: ${{ inputs.name }}
          image-name: ${{ inputs.registry }}/${{ inputs.name }}
          release: ${{ inputs.is-release }}
          version: ${{ inputs.version }}

  build:
    # self-hosted dynamic label (cloud or self-hosted) true/false
    # Define instance sizes (medium, large, xlarge, 2xlarge) to make it work cloud or self-hosted

    #2-core (large)
    #8 GB RAM · 75 GB SSD

    #4-core (xlarge)
    #16 GB RAM · 150 GB SSD

    #8-core (2xlarge)
    #32 GB RAM · 300 GB SSD

    runs-on: [self-hosted, "${{ matrix.platform}}"]
    needs:
      - prepare
    strategy:
      fail-fast: true
      matrix:
        platform:
          - amd64
          - arm64
          ### Make it dynamic if needed, defaults on both architectures
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push ${{ matrix.platform }}
        id: build
        uses: equisoft-actions/docker-build-and-push@DOPS-5820/retire-buildx
        with:
          annotations: ${{ needs.prepare.outputs.annotations }}
          aws-region: ${{ inputs.aws-region }}
          build-args: ${{ inputs.build-args }}
          context: ${{ inputs.context }}
          dockerfile: ${{ inputs.dockerfile }}
          labels: ${{ needs.prepare.outputs.labels }}
          no-cache: ${{ inputs.no-cache }}
          platforms: linux/${{ matrix.platform }}
          pull: ${{ inputs.pull }}
          push: ${{ inputs.push }}
          registry: ${{ inputs.registry }}
          role-to-assume: ${{ inputs.role-to-assume }}
          tags: ${{ needs.prepare.outputs.tags }}
          working-directory: ${{ inputs.working-directory }}

  create-manifest:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    outputs:
      image-id: ${{ steps.outputs.outputs.image-id }}
      image-version: ${{ steps.outputs.outputs.image-version }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: inputs.aws-region != ''
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: create-manisfest-${{ github.run_id }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: inputs.aws-region != ''

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and Push Manifests
        working-directory: ${{ runner.temp }}/digests
        env:
          TAGS: ${{ needs.prepare.outputs.tags }}
        run: |
          images=$(for f in digest-*; do echo "${{ inputs.registry }}/${{ inputs.name }}@$(cat $f)"; done)
          echo "Source images for manifest: $images"

          tag_args=()
          IFS=',' read -ra tag_array <<< "$TAGS"
          for tag in "${tag_array[@]}"; do
            if [[ -n "$tag" ]]; then
              tag_args+=("-t" "$tag")
            fi
          done
          echo "Tags to apply: ${tag_args[@]}"

          echo "--- Creating and pushing manifest to registry ---"
          docker buildx imagetools create "${tag_args[@]}" $images

          echo "--- Inspecting created manifests on registry ---"
          for tag in "${tag_array[@]}"; do
            if [[ -n "$tag" ]]; then
              docker buildx imagetools inspect "$tag"
            fi
          done

      - name: Output image tag
        id: outputs
        shell: bash
        run: |
          IMAGE_TAG=$(cut -d',' -f1 <<<'${{ needs.prepare.outputs.tags }}')
          IMAGE_VERSION=$(cut -d':' -f2 <<<"${IMAGE_TAG}")
          echo "image-version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "image-id=${IMAGE_TAG}" >> $GITHUB_OUTPUT
