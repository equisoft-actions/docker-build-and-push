name: Multi-Architecture Docker Build

on:
  workflow_call:
    inputs:
      registry:
        description: The registry where the image will be pushed to
        type: string
        required: false
        default: registry.equisoft.io
      aws-region:
        description: AWS region for the registry
        type: string
        required: false
      build-args:
        description: Arguments passed to the build command
        type: string
        required: false
        default: ""
      context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context
        type: string
        required: false
        default: "."
      dockerfile:
        description: Relative Dockerfile under working-directory
        type: string
        required: false
        default: Dockerfile
      name:
        description: A simple name for this image
        type: string
        required: true
      no-cache:
        description: Do not use cache when building the image
        type: boolean
        required: false
        default: false
      is-release:
        description: If this build is a production release
        type: boolean
        required: false
        default: false
      pull:
        description: Always attempt to pull all referenced images
        type: boolean
        required: false
        default: false
      push:
        description: Push the built image
        type: boolean
        required: true
        default: false
      role-to-assume:
        description: Role to assume that has write access to the registry
        type: string
        required: false
      role-session-name:
        description: Session name to use when assuming the role
        type: string
        required: false
      version:
        description: The SemVer compatible version for this image
        type: string
        required: true
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located
        type: string
        required: false
        default: "."

    outputs:
      image-version:
        description: Image version built by this workflow
        value: ${{ jobs.build.outputs.image-version }}

jobs:
  build:
    runs-on: [ self-hosted, "${{ matrix.platform}}" ]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
    outputs:
      image-version: ${{ steps.build.outputs.image-version }}
      tags: ${{ steps.build.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and push ${{ matrix.platform }}
        id: build
        uses: equisoft-actions/docker-build-and-push@DOPS-5820/retire-buildx
        with:
          registry: ${{ inputs.registry }}
          aws-region: ${{ inputs.aws-region }}
          build-args: ${{ inputs.build-args }}
          context: ${{ inputs.context }}
          dockerfile: ${{ inputs.dockerfile }}
          name: ${{ inputs.name }}
          no-cache: ${{ inputs.no-cache }}
          is-release: ${{ inputs.is-release }}
          pull: ${{ inputs.pull }}
          push: ${{ inputs.push }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.role-session-name }}-${{ matrix.platform }}
          version: ${{ inputs.version }}
          working-directory: ${{ inputs.working-directory }}

  # create-manifest:
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - build
  #   if: inputs.push == true
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       if: inputs.aws-region != ''
  #       with:
  #         aws-region: ${{ inputs.aws-region }}
  #         role-to-assume: ${{ inputs.role-to-assume }}
  #         role-session-name: ${{ inputs.role-session-name }}-manifest

  #     - name: Login to ECR
  #       uses: aws-actions/amazon-ecr-login@v2
  #       if: inputs.aws-region != ''

  #     - name: Prepare image metadata for manifest
  #       id: metadata
  #       uses: equisoft-actions/docker-metadata@v1
  #       with:
  #         title: ${{ inputs.name }}
  #         image-name: ${{ inputs.registry }}/${{ inputs.name }}
  #         release: ${{ inputs.is-release }}
  #         version: ${{ inputs.version }}

  #     - name: Create and push manifest
  #       shell: bash
  #       run: |
  #         # Use metadata tags (reconstructed from inputs) instead of build job outputs
  #         # This avoids matrix job output issues
  #         TAGS="${{ steps.metadata.outputs.tags }}"
          
  #         echo "Creating manifests for tags: $TAGS"
          
  #         # Create manifest for each tag separately (docker manifest create doesn't handle comma-separated tags)
  #         IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
  #         for tag in "${TAG_ARRAY[@]}"; do
  #           # Trim whitespace
  #           tag=$(echo "$tag" | xargs)
  #           if [[ -n "$tag" ]]; then
  #             echo "Creating manifest for: $tag"
              
  #             # Create manifest list
  #             docker manifest create "$tag" \
  #               "${tag}-amd64" \
  #               "${tag}-arm64"
              
  #             # Push manifest
  #             echo "Pushing manifest: $tag"
  #             docker manifest push "$tag"
  #           fi
  #         done

  create-manifest:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: inputs.aws-region != ''
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.role-session-name }}-manifest

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: inputs.aws-region != ''

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
