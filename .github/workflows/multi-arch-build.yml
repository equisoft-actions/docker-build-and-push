name: Multi-Architecture Docker Build

on:
  workflow_call:
    inputs:
      registry:
        description: The registry where the image will be pushed to
        type: string
        required: false
        default: registry.equisoft.io
      aws-region:
        description: AWS region for the registry
        type: string
        required: false
      build-args:
        description: Arguments passed to the build command
        type: string
        required: false
        default: ""
      context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context
        type: string
        required: false
        default: "."
      dockerfile:
        description: Relative Dockerfile under working-directory
        type: string
        required: false
        default: Dockerfile
      name:
        description: A simple name for this image
        type: string
        required: true
      no-cache:
        description: Do not use cache when building the image
        type: boolean
        required: false
        default: false
      is-release:
        description: If this build is a production release
        type: boolean
        required: false
        default: false
      pull:
        description: Always attempt to pull all referenced images
        type: boolean
        required: false
        default: false
      push:
        description: Push the built image
        type: boolean
        required: true
        default: false
      role-to-assume:
        description: Role to assume that has write access to the registry
        type: string
        required: false
      role-session-name:
        description: Session name to use when assuming the role
        type: string
        required: false
      version:
        description: The SemVer compatible version for this image
        type: string
        required: true
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located
        type: string
        required: false
        default: "."
      runner-amd64:
        description: Runner labels for AMD64 builds
        type: string
        required: false
        default: "ubuntu-latest"
      runner-arm64:
        description: Runner labels for ARM64 builds
        type: string
        required: false
        default: "ubuntu-latest"

    outputs:
      image-version:
        description: Image version built by this workflow
        value: ${{ jobs.build.outputs.image-version }}

jobs:
  build:
    runs-on: [ self-hosted, "${{ matrix.arch }}" ]
    strategy:
      matrix:
        arch: [github-build-amd64, github-build-arm64]
    outputs:
      image-version: ${{ steps.build.outputs.image-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and push ${{ matrix.arch }}
        id: build
        uses: equisoft-actions/docker-build-and-push@DOPS-5820/retire-buildx
        with:
          registry: ${{ inputs.registry }}
          aws-region: ${{ inputs.aws-region }}
          build-args: ${{ inputs.build-args }}
          context: ${{ inputs.context }}
          dockerfile: ${{ inputs.dockerfile }}
          name: ${{ inputs.name }}
          no-cache: ${{ inputs.no-cache }}
          is-release: ${{ inputs.is-release }}
          pull: ${{ inputs.pull }}
          push: ${{ inputs.push }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.role-session-name }}-${{ matrix.arch }}
          version: ${{ inputs.version }}
          working-directory: ${{ inputs.working-directory }}
          target-architecture: ${{ matrix.arch }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build]
    if: inputs.push == true
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: inputs.aws-region != ''
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.role-session-name }}-manifest

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: inputs.aws-region != ''

      - name: Create and push manifest
        shell: bash
        run: |
          REGISTRY="${{ inputs.registry }}"
          IMAGE_NAME="${{ inputs.name }}"
          VERSION="${{ inputs.version }}"
          
          # Create manifest list
          docker manifest create ${REGISTRY}/${IMAGE_NAME}:${VERSION} \
            ${REGISTRY}/${IMAGE_NAME}:${VERSION}-amd64 \
            ${REGISTRY}/${IMAGE_NAME}:${VERSION}-arm64
          
          # Push manifest
          docker manifest push ${REGISTRY}/${IMAGE_NAME}:${VERSION}
